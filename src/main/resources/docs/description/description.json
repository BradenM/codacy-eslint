[
  {
    "patternId": "fatal",
    "title": "Fatal Errors",
    "description": "Prohibits code that will not run, like code with syntax errors",
    "timeToFix": 10
  },
  {
    "patternId": "comma-dangle",
    "title": "Enforce Dangling Commas",
    "description": "Enforces consistent use of trailing commas in object and array literals",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The style of trailing commas [never, always, always-multiline]"
      }
    ]
  },
  {
    "patternId": "no-cond-assign",
    "title": "Prohibit Assignment in Conditions",
    "description": "Prohibits an assignment operator (such as =) in a conditional statement.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Cases where you want the assignment to be prohibited [except-parens, always]"
      }
    ]
  },
  {
    "patternId": "no-console",
    "title": "Prohibit console messages",
    "description": "Console messages are considered to be for debugging purposes and therefore not suitable to ship to the client.",
    "timeToFix": 5
  },
  {
    "patternId": "no-constant-condition",
    "title": "Prohibit constant expressions in conditions",
    "description": "Comparing a literal expression in a condition is usually a typo",
    "timeToFix": 10
  },
  {
    "patternId": "no-control-regex",
    "title": "Prohibit Control Characters in Regular Expressions",
    "description": "Prohibits special, invisible characters in the ASCII range 0-31. These characters are rarely used in JavaScript strings",
    "timeToFix": 15
  },
  {
    "patternId": "no-debugger",
    "title": "Prohibit debugger",
    "description": "The debugger statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain debugger, as it will cause the browser to stop executing code and open an appropriate debugger.",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-args",
    "title": "Prohibit duplicate arguments",
    "description": "Prohibits duplicated parameter names in the same function",
    "timeToFix": 15
  },
  {
    "patternId": "no-dupe-keys",
    "title": "Prohibit Duplicated Keys",
    "description": "Prohibits duplicated key names in the same object",
    "timeToFix": 10
  },
  {
    "patternId": "no-duplicate-case",
    "title": "Prohibit duplicate case label",
    "description": "A switch statement with duplicate case labels is an error.",
    "timeToFix": 10
  },
  {
    "patternId": "no-empty-character-class",
    "title": "Prohibit malformed Regular Expressions",
    "description": "Prohibits empty character classes in regular expressions, they do not match anything.",
    "timeToFix": 20
  },
  {
    "patternId": "no-empty",
    "title": "Prohibit empty Block Statements",
    "description": "Prohibits empty block statements, they are useless",
    "timeToFix": 5
  },
  {
    "patternId": "no-ex-assign",
    "title": "Prohibit assignment of the Exception Parameter",
    "description": "When an error is caught using a catch block, it's possible to accidentally (or purposely) overwrite the reference to the error.",
    "timeToFix": 10
  },
  {
    "patternId": "no-extra-boolean-cast",
    "title": "Prohibit extra boolean casts",
    "description": "Prohibits extra boolean casts like using double negation (!!)",
    "timeToFix": 10
  },
  {
    "patternId": "no-extra-parens",
    "title": "Prohibit Extra Parentheses",
    "description": "Restricts the use of parentheses to only where they are necessary.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Cases where will report unnecessary parentheses[all, functions]"
      }
    ]
  },
  {
    "patternId": "no-extra-semi",
    "title": "Prohibit Extra Semicolons",
    "description": "Prohibits extra semicolons that are unnecessary.",
    "timeToFix": 5
  },
  {
    "patternId": "no-func-assign",
    "title": "Prohibit Function Assignment",
    "description": "Prohibits assigning the name of a function to another function/variable",
    "timeToFix": 20
  },
  {
    "patternId": "no-inner-declarations",
    "title": "Enforce coherent Declarations",
    "description": "Enforces that function (and optionally variables) declarations to be in the root or function body",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if the pattern only applies to functions or to both functions and variables [functions, both]"
      }
    ]
  },
  {
    "patternId": "no-invalid-regexp",
    "title": "Prohibits Invalid Regular Expressions",
    "description": "This rule validates string arguments passed to the RegExp constructor.",
    "timeToFix": 15
  },
  {
    "patternId": "no-irregular-whitespace",
    "title": "Prohibit irregular whitespace",
    "description": "Prohibits invalid or irregular whitespace characters",
    "timeToFix": 15
  },
  {
    "patternId": "no-negated-in-lhs",
    "title": "Prohibit negated left operand in operator",
    "description": "This error is raised to highlight a potential error, usually you want to negate both operand.",
    "timeToFix": 15
  },
  {
    "patternId": "no-obj-calls",
    "title": "Prohibit Global Object function calls",
    "description": "ECMAScript provides several global objects that are intended to be used as-is. Some will throw an error if you try to execute them as functions.",
    "timeToFix": 10
  },
  {
    "patternId": "no-regex-spaces",
    "title": "Prohibit Spaces in Regular Expressions",
    "description": "Prohibits the usage of spaces in Regular expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-sparse-arrays",
    "title": "Prohibit Sparse Arrays",
    "description": "Prohibits the usage of sparse arrays.",
    "timeToFix": 20
  },
  {
    "patternId": "no-unreachable",
    "title": "Prohibit Unreachable Code",
    "description": "A number of statements unconditionally exit a block of code. Any statements after that will not be executed and may be an error. The presence of unreachable code is usually a sign of a coding error.",
    "timeToFix": 20
  },
  {
    "patternId": "use-isnan",
    "title": "Enforce isNaN() to test for NaN",
    "description": "Enforces that you use isNaN instead of (== NaN) to compare with NaN",
    "timeToFix": 10
  },
  {
    "patternId": "valid-jsdoc",
    "title": "Enforce JSDoc correctness",
    "description": "Makes sure that your JSDoc generates your documentation correctly",
    "timeToFix": 15
  },
  {
    "patternId": "valid-typeof",
    "title": "Prohibit invalid typeof comparisons",
    "description": "Prohibits comparisons with strings that will never be a valid return of a typeof",
    "timeToFix": 5
  },
  {
    "patternId": "no-unexpected-multiline",
    "title": "Prohibit unexpected multiline expressions",
    "description": "Prohibits unexpected multiline expressions when not using semicolons",
    "timeToFix": 15
  },
  {
    "patternId": "accessor-pairs",
    "title": "Enforce getter/setter pairs in objects",
    "description": "When you define a setter, you must also define a getter.",
    "timeToFix": 10
  },
  {
    "patternId": "block-scoped-var",
    "title": "Prohibit out of scope variables",
    "description": "Prohibits the usage of variables outside the block where they are defined",
    "timeToFix": 15
  },
  {
    "patternId": "complexity",
    "title": "Prohibits high Cyclomatic Complexity",
    "description": "Cyclomatic complexity measures the number paths through a program's source code. Usually, the lower the better.",
    "timeToFix": 40,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The maximum cyclomatic complexity you want to allow"
      }
    ]
  },
  {
    "patternId": "consistent-return",
    "title": "Enforce Consistent Returns",
    "description": "Enforces that every return statement in a function to return the same type",
    "timeToFix": 20
  },
  {
    "patternId": "curly",
    "title": "Enforce Curly Brace Conventions",
    "description": "Enforces that you use the same curly brace convention throughout all the code",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The convention used by this pattern [all, multi, multi-line, multi-or-nest]"
      }
    ]
  },
  {
    "patternId": "default-case",
    "title": "Enforce Default in Switch",
    "description": "Enforces that you have a default case in your switch statements",
    "timeToFix": 15
  },
  {
    "patternId": "dot-notation",
    "title": "Prohibit square-bracket notation",
    "description": "Prohibits access properties using the square-bracket notation (foo[\"bar\"]).",
    "timeToFix": 10
  },
  {
    "patternId": "dot-location",
    "title": "Enforce coherent multiline dot",
    "description": "Enforces the dot location when accessing a member in an object",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies where you prefer the dot [property, object]"
      }
    ]
  },
  {
    "patternId": "eqeqeq",
    "title": "Enforce === and !==",
    "description": "Requires the use of === and !== instead of == and !=",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The style of equality to follow [smart, allow-null]"
      }
    ]
  },
  {
    "patternId": "guard-for-in",
    "title": "Enforce Guarding for-in",
    "description": "Enforces that you make sure the properties exist when looping over objects",
    "timeToFix": 10
  },
  {
    "patternId": "no-alert",
    "title": "Prohibits Alert",
    "description": "Prohibits the usage of alert, confirm, and prompt, as they are widely considered to be obtrusive as UI elements",
    "timeToFix": 30
  },
  {
    "patternId": "no-caller",
    "title": "Prohibit caller/callee",
    "description": "Prohibits the usage of arguments.caller and arguments.callee",
    "timeToFix": 20
  },
  {
    "patternId": "no-div-regex",
    "title": "Prohibit Regex like division",
    "description": "Prohibits regexs that look like a division",
    "timeToFix": 15
  },
  {
    "patternId": "no-else-return",
    "title": "Prohibit return in else",
    "description": "Prohibits using return inside a else blockIf an if block contains a return statement, its contents can be placed outside of the block.",
    "timeToFix": 15
  },
  {
    "patternId": "no-empty-label",
    "title": "Prohibit empty labels",
    "description": "Prohibits labels when they're used to mark a statement that are not an iteration or switch",
    "timeToFix": 5
  },
  {
    "patternId": "no-eq-null",
    "title": "Prohibit Null Comparisons ==",
    "description": "Prohibits comparing null with == or !=, use === or !== instead",
    "timeToFix": 5
  },
  {
    "patternId": "no-eval",
    "title": "Prohibit eval()",
    "description": "Prohibits the usage of eval()",
    "timeToFix": 5
  },
  {
    "patternId": "no-extend-native",
    "title": "Prohibit Extending of Native Objects",
    "description": "Prohibits extension of native objects.",
    "timeToFix": 20
  },
  {
    "patternId": "no-extra-bind",
    "title": "Prohibit unnecessary function binding",
    "description": "Prohibits bind() method when it does not accomplish anything",
    "timeToFix": 15
  },
  {
    "patternId": "no-fallthrough",
    "title": "Prohibit Switch-Case Fallthrough",
    "description": "Prohibits the usage of cases without breaks (break, return or throw)",
    "timeToFix": 15
  },
  {
    "patternId": "no-floating-decimal",
    "title": "Prohibit Floating Decimals",
    "description": "Prohibits the usage of decimal point when not preceded or followed by a number",
    "timeToFix": 10
  },
  {
    "patternId": "no-implicit-coercion",
    "title": "Prohibit implicit type conversion",
    "description": "Prohibits type conversions that are implicitly made, making them hard to understand",
    "timeToFix": 10
  },
  {
    "patternId": "no-implied-eval",
    "title": "Prohibit Implied eval()",
    "description": "Prohibits using eval(), even implicitly. There are security and performance implications",
    "timeToFix": 15
  },
  {
    "patternId": "no-invalid-this",
    "title": "Prohibit ´this´ outside class",
    "description": "this keyword outside of class or class-like objects might be undefined and raise a TypeError.",
    "timeToFix": 15
  },
  {
    "patternId": "no-iterator",
    "title": "Prohibit Iterator",
    "description": "Prohibits the __iterator__ property, it is obsolete",
    "timeToFix": 20
  },
  {
    "patternId": "no-labels",
    "title": "Prohibit Labeled Statements",
    "description": "Prohibits labeled statements and jumps to it like break and continue to control flow around multiple loops.",
    "timeToFix": 30
  },
  {
    "patternId": "no-lone-blocks",
    "title": "Prohibit unnecessary Nested Blocks",
    "description": "In JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use.",
    "timeToFix": 10
  },
  {
    "patternId": "no-loop-func",
    "title": "Prohibit Functions in Loops",
    "description": "Prohibits writing functions within loops, tends to result in errors.",
    "timeToFix": 30
  },
  {
    "patternId": "no-multi-spaces",
    "title": "Prohibit multiple spaces",
    "description": "Prohibits multiple spaces in a row that are not used for indentation",
    "timeToFix": 5
  },
  {
    "patternId": "no-multi-str",
    "title": "Prohibit Multiline Strings",
    "description": "Prohibits multiline strings by using a slash before a newline",
    "timeToFix": 10
  },
  {
    "patternId": "no-native-reassign",
    "title": "Prohibit Reassignment of Native Objects",
    "description": "Prohibits assigning a value to a built-in native object.",
    "timeToFix": 10
  },
  {
    "patternId": "no-new-func",
    "title": "Prohibit Function Constructor",
    "description": "Prohibits creating functions using the Function constructor",
    "timeToFix": 15
  },
  {
    "patternId": "no-new-wrappers",
    "title": "Prohibit Primitive Wrapper Instances",
    "description": "Prohibits creating unnecessary objects that function as wrappers like String, Number and Boolean",
    "timeToFix": 10
  },
  {
    "patternId": "no-new",
    "title": "Prohibit new For Side Effects",
    "description": "Prohibit creating objects with new and not using them.",
    "timeToFix": 20
  },
  {
    "patternId": "no-octal-escape",
    "title": "Prohibit Octal Escapes",
    "description": "Octal escape sequences are a deprecated feature, use Unicode escapes instead.",
    "timeToFix": 15
  },
  {
    "patternId": "no-octal",
    "title": "Prohibit Octal Literals",
    "description": "Prohibits the usage of octal literals, i.e numerals that begin with a leading zero",
    "timeToFix": 15
  },
  {
    "patternId": "no-param-reassign",
    "title": "Prohibit Reassignment of Function Parameters",
    "description": "Assignment to variables declared as function parameters can be misleading and lead to confusing behavior.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "props",
        "description": "Specifies if props reassignment should be also prohibit [true, false]"
      }
    ]
  },
  {
    "patternId": "no-process-env",
    "title": "Prohibit process.env",
    "description": "Prohibits the usage of process.env to avoid global dependencies.",
    "timeToFix": 40
  },
  {
    "patternId": "no-proto",
    "title": "Prohibit use of __proto__",
    "description": "Prohibits the usage __proto__ property (has been deprecated), use getPrototypeOf.",
    "timeToFix": 10
  },
  {
    "patternId": "no-redeclare",
    "title": "Prohibit Redeclaring Variables",
    "description": "Prohibits that you redeclare a variable, using a var with a name that is already defined",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "When set to true, lets you apply this pattern to built-in global variables [true, false]"
      }
    ]
  },
  {
    "patternId": "no-return-assign",
    "title": "Prohibit Assignment in return Statement",
    "description": "Prohibits assignments in a return statement (it's usually a comparison typo)",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies when the assignment is disallowed [except-parens, always]"
      }
    ]
  },
  {
    "patternId": "no-script-url",
    "title": "Prohibit Script URLs",
    "description": "Prohibits using return of a script as URL, you have to parse it first",
    "timeToFix": 15
  },
  {
    "patternId": "no-self-compare",
    "title": "Prohibit Self Compare",
    "description": "Prohibits comparing a variable against itself, is usually an error or a typo",
    "timeToFix": 15
  },
  {
    "patternId": "no-sequences",
    "title": "Prohibit Comma Operator",
    "description": "Prohibits the comma operator when includes multiple expressions where only one is expected.",
    "timeToFix": 15
  },
  {
    "patternId": "no-throw-literal",
    "title": "Enforce throw Error Object",
    "description": "Enforces that when you throw an object, it has to be the Error object itself",
    "timeToFix": 10
  },
  {
    "patternId": "no-unused-expressions",
    "title": "Prohibit Unused Expressions",
    "description": "Prohibits that you have expressions that evaluate to a value but are never used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "When set to true allows short circuit evaluations [true, false]"
      },
      {
        "name": "allowTernary",
        "description": "When set to true allows the use of ternary operators [true, false]"
      }
    ]
  },
  {
    "patternId": "no-useless-call",
    "title": "Prohibit .call() and .apply().",
    "description": "Prohibits function invocation written by Function.prototype.call() and Function.prototype.apply()",
    "timeToFix": 10
  },
  {
    "patternId": "no-useless-concat",
    "title": "Prohibit unnecessary Concatenation",
    "description": "Prohibits to concatenate two strings together when they are on the same line since they could be combined into a single string.",
    "timeToFix": 5
  },
  {
    "patternId": "no-void",
    "title": "Prohibit void operator",
    "description": "Prohibits the use of void operator to obtain undefined",
    "timeToFix": 10
  },
  {
    "patternId": "no-warning-comments",
    "title": "Prohibit Warning Comments",
    "description": "Prohibits the use of code marks that may suggest that something is not done. Examples are: //TODO: OR //FIX ME.",
    "timeToFix": 5
  },
  {
    "patternId": "no-with",
    "title": "No with Statements",
    "description": "The with statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to. Additionally, the with statement cannot be used in strict mode.",
    "timeToFix": 5
  },
  {
    "patternId": "radix",
    "title": "Require Radix Parameter",
    "description": "When using the parseInt() function it is common to omit the second argument, the radix, and let the function try to determine from the first argument what type of number it is.",
    "timeToFix": 5
  },
  {
    "patternId": "vars-on-top",
    "title": "Require Variable Declarations to be at the top of their scope",
    "description": "Variables Declaration are required to be on the top of their scope or top of the program. By default JavaScript interpreter moves the vars are always moved (“hoisted”) to the top.",
    "timeToFix": 5
  },
  {
    "patternId": "wrap-iife",
    "title": "Require IIFEs to be Wrapped",
    "description": "Require immediate function invocation to be wrapped in parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "yoda",
    "title": "Require or Prohibit Yoda Conditions",
    "description": "Yoda conditions are so named because the literal value of the condition comes first while the variable comes second.",
    "timeToFix": 5
  },
  {
    "patternId": "strict",
    "title": "Strict Mode",
    "description": "A Use Strict Directive at the beginning of a script or function body enables strict mode semantics.",
    "timeToFix": 5
  },
  {
    "patternId": "init-declarations",
    "title": "Enforce/Prohibit Variable Initializations",
    "description": "Variables can be assigned during declaration,or afterwards using an assignment statement. This pattern enforces coherense when assigning variables",
    "timeToFix": 10
  },
  {
    "patternId": "no-catch-shadow",
    "title": "Prohibit Shadowing of Variables Inside of catch",
    "description": "his rule prevents the use of variables in the catch clause parameter with the same name as a variable in the outer scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-delete-var",
    "title": "Prohibit Variables Deletion",
    "description": "This rule prevents the use of delete operator on variables:",
    "timeToFix": 5
  },
  {
    "patternId": "no-label-var",
    "title": "Prohibit Labels That Are Variables Names",
    "description": "This rule aims to create clearer code by Prohibiting the bad practice of creating a label that shares a name with a variable that is in scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-shadow-restricted-names",
    "title": "Prohibit Shadowing of Restricted Names",
    "description": "ES5 §15.1.1 Value Properties of the Global Object (NaN, Infinity, undefined) as well as strict mode restricted identifiers eval and arguments are considered to be restricted names in JavaScript. Defining them to mean something else can have unintended consequences and confuse others reading the code.",
    "timeToFix": 5
  },
  {
    "patternId": "no-shadow",
    "title": "Prohibit Shadowing",
    "description": "Shadowing is the process by which a local variable shares the same name as a variable in its containing scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-undef-init",
    "title": "Prohibit Initializing to undefined",
    "description": "In JavaScript, a variable that is declared and not initialized to any value automatically gets the value of undefined.",
    "timeToFix": 10
  },
  {
    "patternId": "no-undef",
    "title": "Prohibit Undeclared Variables",
    "description": "Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment. This rule provides compatibility with JSHint's and JSLint's treatment of global variables.",
    "timeToFix": 5
  },
  {
    "patternId": "no-undefined",
    "title": "Prohibit Use of undefined Variable",
    "description": "The undefined variable is unique in JavaScript because it is actually a property of the global object. ECMAScript 3 is possible to overwrite the value of undefined while ECMAScript 5 Prohibits overwriting undefined. It's still possible to shadow undefined.",
    "timeToFix": 5
  },
  {
    "patternId": "no-unused-vars",
    "title": "Prohibit Unused Variables",
    "description": "Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.",
    "timeToFix": 10
  },
  {
    "patternId": "no-use-before-define",
    "title": "Prohibit Early Use",
    "description": "In JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing.",
    "timeToFix": 10
  },
  {
    "patternId": "callback-return",
    "title": "Enforce Return After Callback",
    "description": "The callback pattern is at the heart of most I/O and event-driven programming in JavaScript.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The style of callback acepted [callback, cb, next]"
      }
    ]
  },
  {
    "patternId": "global-require",
    "title": "Prohibit require() outside of the top-level module scope.",
    "description": "Needs to declare module's dependencies at the beginning of a module these dependencies in other parts of the code may make them harder to spot and could lead to poor maintenence.",
    "timeToFix": 5
  },
  {
    "patternId": "handle-callback-err",
    "title": "Enforce Callback Error Handling",
    "description": "In node, a common pattern for dealing with asynchronous behavior is called the callback pattern. This pattern expects an Error object or null as the first argument of the callback, forgetting to handle these errors can lead to some really strange behavior in your application.",
    "timeToFix": 10
  },
  {
    "patternId": "no-mixed-requires",
    "title": "Prohibit Mixed Requires",
    "description": "In the Node.JS community it is often customary to separate the required modules from other variable declarations, sometimes also grouping them by their type. This rule helps you enforce this convention.",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-require",
    "title": "Prohibit new require",
    "description": "The require function is used to include modules that exist in separate files.",
    "timeToFix": 5
  },
  {
    "patternId": "no-path-concat",
    "title": "Prohibit string concatenation when using _dirname and _filename",
    "description": "In Node.js, the __dirname and __filename global variables contain the directory path and the file path of the currently executing script file, respectively. Sometimes, developers try to use these variables to create paths to other files.",
    "timeToFix": 10
  },
  {
    "patternId": "no-process-exit",
    "title": "Prohibit process.exit()",
    "description": "Prohibits process.exit() method in Node.js this is used to immediately stop the Node.js process and exit. This is dangerous and can cause the application to suddenly stop",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-modules",
    "title": "Prohibit Node modules",
    "description": "Prohibiting usage of specific node modules can be useful if you want to control the available methods that a developer can use to implement a feature.",
    "timeToFix": 5
  },
  {
    "patternId": "no-sync",
    "title": "Prohibit Synchronous Methods",
    "description": "There are often synchronous versions of the asynchronous methods. Synchronous operations are considered bad practice in most cases and should be avoided.",
    "timeToFix": 10
  },
  {
    "patternId": "array-bracket-spacing",
    "title": "Prohibit or enforce spaces inside of brackets.",
    "description": "A number of style guides require or Prohibit spaces between array brackets. This rule applies to both array literals and destructuring assignment (EcmaScript 6) using arrays.",
    "timeToFix": 5
  },
  {
    "patternId": "block-spacing",
    "title": "Prohibit or enforce spaces inside of single line blocks.",
    "description": "This rule is for spacing style within single line blocks.",
    "timeToFix": 15,
    "parameters": [
        {
          "name": "unnamedParam",
          "description": "Enforces or prohibits spaces within single block lines[always, never]"
        }
        ]
  },
  {
    "patternId": "brace-style",
    "title": "Require Brace Style",
    "description": "Brace style is closely related to indent style in programming and describes the placement of curly braces relative to their control statement and body.",
    "timeToFix": 5
  },
  {
    "patternId": "camelcase",
    "title": "Require Camelcase",
    "description": "When it comes to naming variables, styleguides generally fall into one of two camps: camelcase (variableName) and underscores (variable_name). This rule focuses on using the camelcase approach.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "properties",
        "description": "The style of variables camelCase [always, never]"
      }
    ]
  },
  {
    "patternId": "comma-spacing",
    "title": "Enforces spacing around commas",
    "description": "Spacing around commas improve readability of a list of items.",
    "timeToFix": 5
  },
  {
    "patternId": "comma-style",
    "title": "Comma style",
    "description": "Comma Style rule enforces comma styles for a list of things separated by commas. There are two comma styles primarily in JavaScript. The standard one in which commas are placed at the end of the line. And Comma-First, in which, commas are placed at the start of the next line after the list item.",
    "timeToFix": 5
  },
  {
    "patternId": "computed-property-spacing",
    "title": "Prohibit or enforce spaces inside of computed properties.",
    "description": "While formatting preferences are very personal, a number of style guides require or Prohibit spaces between computed properties.",
    "timeToFix": 5
  },
  {
    "patternId": "consistent-this",
    "title": "Require Consistent This",
    "description": "It is often necessary to capture the current execution context in order to make it available subsequently. A prominent example of this are jQuery callbacks.",
    "timeToFix": 10
  },
  {
    "patternId": "eol-last",
    "title": "Require file to end with single newline",
    "description": "This rule enforces newlines for all non-empty programs.",
    "timeToFix": 15
  },
  {
    "patternId": "func-names",
    "title": "Require Function Expressions to have a Name",
    "description": "A pattern that's becoming more common is to give function expressions names to aid in debugging.",
    "timeToFix": 5
  },
  {
    "patternId": "func-style",
    "title": "Enforce Function Style",
    "description": "There are two ways of defining functions in JavaScript: function declarations and function expressions. Declarations have the function keyword first, followed by a name, followed by its arguments and the function body.",
    "timeToFix": 5
  },
  {
    "patternId": "id-length",
    "title": "Limit minimum and maximum length for identifiers",
    "description": "Very short identifier names like e, x, _t or very long ones like hashGeneratorResultOutputContainerObject usually make the code harder to read and potentially less maintainable. To prevent this, one may enforce a minimum and/or maximum identifier length. (usually min 2-chars)",
    "timeToFix": 5
  },
  {
    "patternId": "id-match",
    "title": "Require IDs to match a pattern",
    "description": "Naming things consistently in a project is an often underestimated aspect of code creation. When done right, it can save your team hours of unnecessary head scratching and misdirections. This rule allows you to precisely define and enforce the variables and function names on your team should use. No more limiting yourself to camelCase, snake_case, PascalCase or oHungarianNotation. Id-match has all your needs covered!",
    "timeToFix": 5
  },
  {
    "patternId": "indent",
    "title": "Validate Indentation",
    "description": "This option validates a specific tab width for your code in block statements.",
    "timeToFix": 10
  },
  {
    "patternId": "jsx-quotes",
    "title": "Enforce JSX Quote Style",
    "description": "JSX attribute values can contain string literals, which are delimited with single or double quotes.",
    "timeToFix": 10
  },
  {
    "patternId": "key-spacing",
    "title": "Enforce Property Spacing",
    "description": "This rule enforces spacing around the colon in object literal properties. It can verify each property individually, or it can ensure vertical alignment of groups of properties in an object literal.",
    "timeToFix": 10
  },
  {
    "patternId": "lines-around-comment",
    "title": "Enforce empty lines around comments",
    "description": "Many style guides require empty lines before or after comments. The primary goal of these rules is to make the comments easier to read and improve readability of the code.",
    "timeToFix": 10
  },
  {
    "patternId": "linebreak-style",
    "title": "Prohibit mixing CRLF and LF linebreaks",
    "description": "When developing with a lot of people all having different editors, VCS applications and operating systems it may occur that different line endings are written by either of the mentioned.",
    "timeToFix": 5
  },
  {
    "patternId": "max-nested-callbacks",
    "title": "Set Maximum Depth of Nested Callbacks",
    "description": "A program of any complexity will most likely need to manage several asynchronous operations at various levels of concurrency. A common pitfall that is easy to fall into is nesting callbacks, which makes code more difficult to read the deeper the callbacks are nested.",
    "timeToFix": 10
  },
  {
    "patternId": "new-cap",
    "title": "Require Constructors to Use Initial Caps",
    "description": "Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.",
    "timeToFix": 10
  },
  {
    "patternId": "new-parens",
    "title": "Require Parens for Constructors",
    "description": "JavaScript allows the omission of parentheses when invoking a function via the new keyword and the constructor has no arguments. However, some coders believe that omitting the parentheses is inconsistent with the rest of the language and thus makes code less clear.",
    "timeToFix": 10
  },
  {
    "patternId": "newline-after-var",
    "title": "Require or Prohibit an empty newline after variable declarations",
    "description": "As of today there is no consistency in separating variable declarations from the rest of the code. Some developers leave an empty line between var statements",
    "timeToFix": 5
  },
  {
    "patternId": "no-array-constructor",
    "title": "Prohibit creation of dense arrays using the Array constructor",
    "description": "Use of the Array constructor to construct a new array is generally discouraged in favour of array literal notation because of the single-argument pitfall and because the Array global may be redefined.",
    "timeToFix": 10
  },
  {
    "patternId": "no-continue",
    "title": "Prohibit continue",
    "description": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. ",
    "timeToFix": 5
  },
  {
    "patternId": "no-inline-comments",
    "title": "Prohibits comments after code. Comments must come on their own lines",
    "description": "Some style guides Prohibit a comments on the same line as code. If there are comments immediately following code, it can make it harder to read the code.",
    "timeToFix": 5
  },
  {
    "patternId": "no-lonely-if",
    "title": "Prohibit if as the Only Statement in an else Block",
    "description": "If an if statement is the only statement in the else block of a parent if statement, it is often clearer to combine the two to using else if form.",
    "timeToFix": 15
  },
  {
    "patternId": "no-mixed-spaces-and-tabs",
    "title": "Prohibit mixed spaces and tabs for indentation",
    "description": "Most code conventions require either tabs or spaces be used for indentation. As such, it's usually an error if a single line of code is indented with both tabs and spaces.",
    "timeToFix": 5
  },
  {
    "patternId": "no-multiple-empty-lines",
    "title": "Prohibits multiple blank lines",
    "description": "Some developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.",
    "timeToFix": 10
  },
  {
    "patternId": "no-nested-ternary",
    "title": "Prohibit Nested Ternaries",
    "description": "Nesting ternary expressions makes code unclear. The no-nested-ternary rule Prohibits the use of nested ternary expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "no-negated-condition",
    "title": "Prohibit use of negated expressions in conditions",
    "description": "Checks against the use of a negated expression in an if condition when the else branch is not empty or in a ternary operator. Negated conditions are more difficult to understand. Code can be made more readable by inverting the condition instead.",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-object",
    "title": "Prohibit the use of the Object constructor",
    "description": "The Object constructor is used to create new generic objects in JavaScript.",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-syntax",
    "title": "Prohibit certain syntax",
    "description": "Some code bases prefer to not use certain features of JavaScript that are identified on the parsed AST such as FunctionExpression or WithStatement. This is implemented to warn on any AST node type that is passed to it.",
    "timeToFix": 5
  },
  {
    "patternId": "no-spaced-func",
    "title": "Prohibit Spaces in Function Calls",
    "description": "While it's possible to have whitespace between the name of a function and the parentheses that execute it, such patterns tend to look more like errors.",
    "timeToFix": 5
  },
  {
    "patternId": "no-ternary",
    "title": "Prohibit Ternary Operators",
    "description": "The ternary operator is used to conditionally assign a value to a variable. Some believe that the use of ternary operators leads to unclear code.",
    "timeToFix": 5
  },
  {
    "patternId": "no-trailing-spaces",
    "title": "Prohibit trailing spaces at the end of lines",
    "description": "Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. This rule cleans the extra space.",
    "timeToFix": 5
  },
  {
    "patternId": "no-underscore-dangle",
    "title": "Prohibit Dangling Underscores in Identifiers",
    "description": "As far as naming conventions for identifiers go, dangling underscores may be the most polarizing in JavaScript.",
    "timeToFix": 5
  },
  {
    "patternId": "no-unneeded-ternary",
    "title": "Prohibit conditional expressions that can be expressed with simpler constructs",
    "description": "use ! to convert the test to a Boolean.",
    "timeToFix": 10
  },
  {
    "patternId": "object-curly-spacing",
    "title": "Prohibit or enforce spaces inside of curly braces in objects.",
    "description": "Prohibit spaces between curly braces.",
    "timeToFix": 10
  },
  {
    "patternId": "one-var",
    "title": "Require or Prohibit One Variable Declaration per Scope",
    "description": "Variables can be declared at any point in JavaScript code using var, let, or const. This rule allows you to use only one var per scope.",
    "timeToFix": 5
  },
  {
    "patternId": "operator-assignment",
    "title": "Operator Assignment Shorthand",
    "description": "JavaScript provides shorthand operators that combine variable assignment and some simple mathematical operations. For example, x = x + 4 can be shortened to x += 4. ",
    "timeToFix": 5
  },
  {
    "patternId": "operator-linebreak",
    "title": "Operator Linebreak",
    "description": "When a statement is too long to fit on a single line, line breaks are generally inserted next to the operators separating expressions.",
    "timeToFix": 5
  },
  {
    "patternId": "padded-blocks",
    "title": "Enforce padding within blocks",
    "description": "The goal of this pattern is to improve readability by visually separating the block content and the surrounding code.",
    "timeToFix": 5
  },
  {
    "patternId": "quote-props",
    "title": "Quoting Style for Property Names",
    "description": "Object literal property names can be defined in two ways: using literals or using strings.",
    "timeToFix": 5
  },
  {
    "patternId": "quotes",
    "title": "Quotes Style",
    "description": "Enforce coherent quotes style",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The quoting style you prefer [single, double]"
      }
    ]
  },
  {
    "patternId": "require-jsdoc",
    "title": "Require JSDoc comment",
    "description": "This rule generates warnings for nodes which do not have JSDoc comments.",
    "timeToFix": 5
  },
  {
    "patternId": "semi-spacing",
    "title": "Enforce spacing before and after semicolons",
    "description": "JavaScript allows you to place unnecessary spaces before or after a semicolon.",
    "timeToFix": 10
  },
  {
    "patternId": "semi",
    "title": "Enforce or Prohibit Semicolons",
    "description": "Enforce or Prohibit Semicolons and the end of each statement.",
    "timeToFix": 10
  },
  {
    "patternId": "sort-vars",
    "title": "Variable Sorting",
    "description": "Enforce the sorting of variables during declaration.",
    "timeToFix": 5
  },
  {
    "patternId": "space-after-keywords",
    "title": "Require or Prohibit spaces following keywords",
    "description": "Some style guides will require or Prohibit spaces following the certain keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "space-before-keywords",
    "title": "Require or Prohibit spaces before keywords",
    "description": "Some styleguides require or Prohibit spaces preceding certain keywords.",
    "timeToFix": 10
  },
  {
    "patternId": "space-before-blocks",
    "title": "Require Or Prohibit Space Before Blocks",
    "description": "Require or Prohibit consistency in the spacing before blocks.",
    "timeToFix": 10
  },
  {
    "patternId": "space-before-function-paren",
    "title": "Require or Prohibit a space before function parenthesis",
    "description": "When formatting a function, whitespace is allowed between the function name or function keyword and the opening paren.",
    "timeToFix": 5
  },
  {
    "patternId": "space-in-parens",
    "title": "Prohibit or enforce spaces inside of parentheses",
    "description": "Some style guides require or Prohibit spaces inside of parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "space-infix-ops",
    "title": "Require Spaces Around Infix Operators",
    "description": "Some style guides require spaces around operators.",
    "timeToFix": 10
  },
  {
    "patternId": "space-return-throw-case",
    "title": "Require spaces following return, throw, and case",
    "description": "Require spaces following return, throw, and case.",
    "timeToFix": 5
  },
  {
    "patternId": "space-unary-ops",
    "title": "Require or Prohibit spaces before/after unary operators",
    "description": "This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.",
    "timeToFix": 5
  },
  {
    "patternId": "spaced-comment",
    "title": "Requires or Prohibits a whitespace (space or tab) beginning a comment",
    "description": "Some style guides require or Prohibit a whitespace immediately after the initial // or /* of a comment.",
    "timeToFix": 10
  },
  {
    "patternId": "wrap-regex",
    "title": "Require Regex Literals to be Wrapped",
    "description": "When a regular expression is used in certain situations, it can end up looking like a division operator.",
    "timeToFix": 5
  },
  {
    "patternId": "arrow-parens",
    "title": "Require parens in arrow function arguments",
    "description": "Enforces the consistent use of parentheses in arrow functions.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Enforces the use of arrow parens [always, as-needed]"
      }
    ]
  },
  {
    "patternId": "arrow-spacing",
    "title": "Require space before/after arrow function's arrow",
    "description": "This rule normalize style of spacing before/after an arrow function's arrow(=>).",
    "timeToFix": 5,
    "parameters": [
        {
          "name": "before",
          "description": "Enforces spaces before arrow parenses"
        },
        {
          "name": "after",
           "description": "Enforces spaces after arrow parenses"
        }
    ]
  },
  {
    "patternId": "constructor-super",
    "title": "Verify calls of super() in constructors",
    "description": "Constructors of derived classes must call super().",
    "timeToFix": 5
  },
  {
    "patternId": "generator-star-spacing",
    "title": "Enforce spacing around the * in generator functions",
    "description": "Generators are a new type of function in ECMAScript 6 that can return multiple values over time.",
    "timeToFix": 5
  },
  {
    "patternId": "no-class-assign",
    "title": "Prohibit modifying variables of class declarations",
    "description": "ClassDeclaration creates a variable, and we can modify the variable.",
    "timeToFix": 5
  },
  {
    "patternId": "no-const-assign",
    "title": "Prohibit modifying variables that are declared using const",
    "description": "We cannot modify variables that are declared using const keyword.",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-class-members",
    "title": "Prohibit duplicate name in class members",
    "description": "If there are declarations of the same name in class members, the last declaration overwrites other declarations.",
    "timeToFix": 10
  },
  {
    "patternId": "no-this-before-super",
    "title": "Prohibit use of this/super before calling super() in constructors.",
    "description": "In the constructor of derived classes, if this/super are used before super() calls, it raises a reference error.",
    "timeToFix": 5
  },
  {
    "patternId": "no-var",
    "title": "require let or const instead of var",
    "description": "ECMAScript 6 allows programmers to create variables with block scope instead of function scope using the let and const keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "object-shorthand",
    "title": "Require Object Literal Shorthand Syntax",
    "description":"This syntax can make defining complex object literals much cleaner.",
    "timeToFix": 10
  },
  {
    "patternId": "prefer-arrow-callback",
    "title": "Suggest using arrow functions as callbacks.",
    "description": "Arrow functions are suited to callbacks.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-const",
    "title": "Suggest using const",
    "description": "If a variable is never modified, using the const declaration is better.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-spread",
    "title": "Suggest using the spread operator instead of .apply().",
    "description": "Before ES2015, one must use Function.prototype.apply() to call variadic functions.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-reflect",
    "title": "Suggest using Reflect methods where applicable",
    "description": "The ES6 Reflect API comes with a handful of methods which deprecate methods on old constructors.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-template",
    "title": "Suggest using template literals instead of string concatenation.",
    "description": "In ES2015 (ES6), we can use template literals instead of string concatenation.",
    "timeToFix": 10
  },
  {
    "patternId": "require-yield",
    "title": "Prohibit generator functions that do not have yield",
    "description": "This rule generates warnings for generator functions that do not have the yield keyword.",
    "timeToFix": 10
  }
]