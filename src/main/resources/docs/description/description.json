[
  {
    "patternId": "fatal",
    "title": "Fatal Errors",
    "description": "Prohibits code that will not run, like code with syntax errors",
    "timeToFix": 10
  },
  {
    "patternId": "comma-dangle",
    "title": "Enforce Dangling Commas",
    "description": "Enforces consistent use of trailing commas in object and array literals",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The style of trailing commas [never, always, always-multiline]"
      }
    ]
  },
  {
    "patternId": "no-cond-assign",
    "title": "Prohibit Assignment in Conditions",
    "description": "Prohibits an assignment operator (such as =) in a conditional statement.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Cases where you want the assignment to be prohibited [except-parens, always]"
      }
    ]
  },
  {
    "patternId": "no-console",
    "title": "Prohibit console messages",
    "description": "Console messages are considered to be for debugging purposes and therefore not suitable to ship to the client.",
    "timeToFix": 5
  },
  {
    "patternId": "no-constant-condition",
    "title": "Prohibit constant expressions in conditions",
    "description": "Comparing a literal expression in a condition is usually a typo",
    "timeToFix": 10
  },
  {
    "patternId": "no-control-regex",
    "title": "Prohibit Control Characters in Regular Expressions",
    "description": "Prohibits special, invisible characters in the ASCII range 0-31. These characters are rarely used in JavaScript strings",
    "timeToFix": 15
  },
  {
    "patternId": "no-debugger",
    "title": "Prohibit debugger",
    "description": "The debugger statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain debugger, as it will cause the browser to stop executing code and open an appropriate debugger.",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-args",
    "title": "Prohibit duplicate arguments",
    "description": "Prohibits duplicated parameter names in the same function",
    "timeToFix": 15
  },
  {
    "patternId": "no-dupe-keys",
    "title": "Prohibit Duplicated Keys",
    "description": "Prohibits duplicated key names in the same object",
    "timeToFix": 10
  },
  {
    "patternId": "no-duplicate-case",
    "title": "Prohibit duplicate case label",
    "description": "A switch statement with duplicate case labels is an error.",
    "timeToFix": 10
  },
  {
    "patternId": "no-empty-character-class",
    "title": "Prohibit malformed Regular Expressions",
    "description": "Prohibits empty character classes in regular expressions, they do not match anything.",
    "timeToFix": 20
  },
  {
    "patternId": "no-empty",
    "title": "Prohibit empty Block Statements",
    "description": "Prohibits empty block statements, they are useless",
    "timeToFix": 5
  },
  {
    "patternId": "no-ex-assign",
    "title": "Prohibit assignment of the Exception Parameter",
    "description": "When an error is caught using a catch block, it's possible to accidentally (or purposely) overwrite the reference to the error.",
    "timeToFix": 10
  },
  {
    "patternId": "no-extra-boolean-cast",
    "title": "Prohibit extra boolean casts",
    "description": "Prohibits extra boolean casts like using double negation (!!)",
    "timeToFix": 10
  },
  {
    "patternId": "no-extra-parens",
    "title": "Prohibit Extra Parentheses",
    "description": "Restricts the use of parentheses to only where they are necessary.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Cases where will report unnecessary parentheses[all, functions]"
      }
    ]
  },
  {
    "patternId": "no-extra-semi",
    "title": "Prohibit Extra Semicolons",
    "description": "Prohibits extra semicolons that are unnecessary.",
    "timeToFix": 5
  },
  {
    "patternId": "no-func-assign",
    "title": "Prohibit Function Assignment",
    "description": "Prohibits assigning the name of a function to another function/variable",
    "timeToFix": 20
  },
  {
    "patternId": "no-inner-declarations",
    "title": "Enforce coherent Declarations",
    "description": "Enforces that function (and optionally variables) declarations to be in the root or function body",
    "timeToFix": 30,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies if the pattern only applies to functions or to both functions and variables [functions, both]"
      }
    ]
  },
  {
    "patternId": "no-invalid-regexp",
    "title": "Prohibits Invalid Regular Expressions",
    "description": "This rule validates string arguments passed to the RegExp constructor.",
    "timeToFix": 15
  },
  {
    "patternId": "no-irregular-whitespace",
    "title": "Prohibit irregular whitespace",
    "description": "Prohibits invalid or irregular whitespace characters",
    "timeToFix": 15
  },
  {
    "patternId": "no-negated-in-lhs",
    "title": "Prohibit negated left operand in operator",
    "description": "This error is raised to highlight a potential error, usually you want to negate both operand.",
    "timeToFix": 15
  },
  {
    "patternId": "no-obj-calls",
    "title": "Prohibit Global Object function calls",
    "description": "ECMAScript provides several global objects that are intended to be used as-is. Some will throw an error if you try to execute them as functions.",
    "timeToFix": 10
  },
  {
    "patternId": "no-regex-spaces",
    "title": "Prohibit Spaces in Regular Expressions",
    "description": "Prohibits the usage of spaces in Regular expressions",
    "timeToFix": 5
  },
  {
    "patternId": "no-sparse-arrays",
    "title": "Prohibit Sparse Arrays",
    "description": "Prohibits the usage of sparse arrays.",
    "timeToFix": 20
  },
  {
    "patternId": "no-unreachable",
    "title": "Prohibit Unreachable Code",
    "description": "A number of statements unconditionally exit a block of code. Any statements after that will not be executed and may be an error. The presence of unreachable code is usually a sign of a coding error.",
    "timeToFix": 20
  },
  {
    "patternId": "use-isnan",
    "title": "Enforce isNaN() to test for NaN",
    "description": "Enforces that you use isNaN instead of (== NaN) to compare with NaN",
    "timeToFix": 10
  },
  {
    "patternId": "valid-jsdoc",
    "title": "Enforce JSDoc correctness",
    "description": "Makes sure that your JSDoc generates your documentation correctly",
    "timeToFix": 15
  },
  {
    "patternId": "valid-typeof",
    "title": "Prohibit invalid typeof comparisons",
    "description": "Prohibits comparisons with strings that will never be a valid return of a typeof",
    "timeToFix": 5
  },
  {
    "patternId": "no-unexpected-multiline",
    "title": "Prohibit unexpected multiline expressions",
    "description": "Prohibits unexpected multiline expressions when not using semicolons",
    "timeToFix": 15
  },
  {
    "patternId": "accessor-pairs",
    "title": "Enforce getter/setter pairs in objects",
    "description": "When you define a setter, you must also define a getter.",
    "timeToFix": 10
  },
  {
    "patternId": "block-scoped-var",
    "title": "Prohibit out of scope variables",
    "description": "Prohibits the usage of variables outside the block where they are defined",
    "timeToFix": 15
  },
  {
    "patternId": "complexity",
    "title": "Prohibits high Cyclomatic Complexity",
    "description": "Cyclomatic complexity measures the number paths through a program's source code. Usually, the lower the better.",
    "timeToFix": 40,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The maximum cyclomatic complexity you want to allow"
      }
    ]
  },
  {
    "patternId": "consistent-return",
    "title": "Enforce Consistent Returns",
    "description": "Enforces that every return statement in a function to return the same type",
    "timeToFix": 20
  },
  {
    "patternId": "curly",
    "title": "Enforce Curly Brace Conventions",
    "description": "Enforces that you use the same curly brace convention throughout all the code",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The convention used by this pattern [all, multi, multi-line, multi-or-nest]"
      }
    ]
  },
  {
    "patternId": "default-case",
    "title": "Enforce default case in switch",
    "description": "Enforces that you have a default case in your switch statements",
    "timeToFix": 15
  },
  {
    "patternId": "dot-notation",
    "title": "Prohibit square-bracket notation",
    "description": "Prohibits access properties using the square-bracket notation (foo[\"bar\"]).",
    "timeToFix": 10
  },
  {
    "patternId": "dot-location",
    "title": "Enforce coherent multiline dot",
    "description": "Enforces the dot location when accessing a member in an object",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies where you prefer the dot [property, object]"
      }
    ]
  },
  {
    "patternId": "eqeqeq",
    "title": "Enforce === and !==",
    "description": "Requires the use of === and !== instead of == and !=",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The style of equality to follow [smart, allow-null]"
      }
    ]
  },
  {
    "patternId": "guard-for-in",
    "title": "Enforce Guarding for-in",
    "description": "Enforces that you make sure the properties exist when looping over objects",
    "timeToFix": 10
  },
  {
    "patternId": "no-alert",
    "title": "Prohibits Alert",
    "description": "Prohibits the usage of alert, confirm, and prompt, as they are widely considered to be obtrusive as UI elements",
    "timeToFix": 30
  },
  {
    "patternId": "no-caller",
    "title": "Prohibit caller/callee",
    "description": "Prohibits the usage of arguments.caller and arguments.callee",
    "timeToFix": 20
  },
  {
    "patternId": "no-div-regex",
    "title": "Prohibit Regex like division",
    "description": "Prohibits regexs that look like a division",
    "timeToFix": 15
  },
  {
    "patternId": "no-else-return",
    "title": "Prohibit return in else",
    "description": "Prohibits using return inside a else blockIf an if block contains a return statement, its contents can be placed outside of the block.",
    "timeToFix": 15
  },
  {
    "patternId": "no-empty-label",
    "title": "Prohibit empty labels",
    "description": "Prohibits labels when they're used to mark a statement that are not an iteration or switch",
    "timeToFix": 5
  },
  {
    "patternId": "no-eq-null",
    "title": "Prohibit Null Comparisons ==",
    "description": "Prohibits comparing null with == or !=, use === or !== instead",
    "timeToFix": 5
  },
  {
    "patternId": "no-eval",
    "title": "Prohibit eval()",
    "description": "Prohibits the usage of eval()",
    "timeToFix": 5
  },
  {
    "patternId": "no-extend-native",
    "title": "Prohibit Extending of Native Objects",
    "description": "Prohibits extension of native objects.",
    "timeToFix": 20
  },
  {
    "patternId": "no-extra-bind",
    "title": "Prohibit unnecessary function binding",
    "description": "Prohibits bind() method when it does not accomplish anything",
    "timeToFix": 15
  },
  {
    "patternId": "no-fallthrough",
    "title": "Prohibit Switch-Case Fallthrough",
    "description": "Prohibits the usage of cases without breaks (break, return or throw)",
    "timeToFix": 15
  },
  {
    "patternId": "no-floating-decimal",
    "title": "Prohibit Floating Decimals",
    "description": "Prohibits the usage of decimal point when not preceded or followed by a number",
    "timeToFix": 10
  },
  {
    "patternId": "no-implicit-coercion",
    "title": "Prohibit implicit type conversion",
    "description": "Prohibits type conversions that are implicitly made, making them hard to understand",
    "timeToFix": 10
  },
  {
    "patternId": "no-implied-eval",
    "title": "Prohibit Implied eval()",
    "description": "Prohibits using eval(), even implicitly. There are security and performance implications",
    "timeToFix": 15
  },
  {
    "patternId": "no-invalid-this",
    "title": "Prohibit ´this´ outside class",
    "description": "this keyword outside of class or class-like objects might be undefined and raise a TypeError.",
    "timeToFix": 15
  },
  {
    "patternId": "no-iterator",
    "title": "Prohibit Iterator",
    "description": "Prohibits the __iterator__ property, it is obsolete",
    "timeToFix": 20
  },
  {
    "patternId": "no-labels",
    "title": "Prohibit Labeled Statements",
    "description": "Prohibits labeled statements and jumps to it like break and continue to control flow around multiple loops.",
    "timeToFix": 30
  },
  {
    "patternId": "no-lone-blocks",
    "title": "Prohibit unnecessary Nested Blocks",
    "description": "In JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use.",
    "timeToFix": 10
  },
  {
    "patternId": "no-loop-func",
    "title": "Prohibit Functions in Loops",
    "description": "Prohibits writing functions within loops, tends to result in errors.",
    "timeToFix": 30
  },
  {
    "patternId": "no-multi-spaces",
    "title": "Prohibit multiple spaces",
    "description": "Prohibits multiple spaces in a row that are not used for indentation",
    "timeToFix": 5
  },
  {
    "patternId": "no-multi-str",
    "title": "Prohibit Multiline Strings",
    "description": "Prohibits multiline strings by using a slash before a newline",
    "timeToFix": 10
  },
  {
    "patternId": "no-native-reassign",
    "title": "Prohibit Reassignment of Native Objects",
    "description": "Prohibits assigning a value to a built-in native object.",
    "timeToFix": 10
  },
  {
    "patternId": "no-new-func",
    "title": "Prohibit Function Constructor",
    "description": "Prohibits creating functions using the Function constructor",
    "timeToFix": 15
  },
  {
    "patternId": "no-new-wrappers",
    "title": "Prohibit Primitive Wrapper Instances",
    "description": "Prohibits creating unnecessary objects that function as wrappers like String, Number and Boolean",
    "timeToFix": 10
  },
  {
    "patternId": "no-new",
    "title": "Prohibit new For Side Effects",
    "description": "Prohibit creating objects with new and not using them.",
    "timeToFix": 20
  },
  {
    "patternId": "no-octal-escape",
    "title": "Prohibit Octal Escapes",
    "description": "Octal escape sequences are a deprecated feature, use Unicode escapes instead.",
    "timeToFix": 15
  },
  {
    "patternId": "no-octal",
    "title": "Prohibit Octal Literals",
    "description": "Prohibits the usage of octal literals, i.e numerals that begin with a leading zero",
    "timeToFix": 15
  },
  {
    "patternId": "no-param-reassign",
    "title": "Prohibit Reassignment of Function Parameters",
    "description": "Assignment to variables declared as function parameters can be misleading and lead to confusing behavior.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "props",
        "description": "Specifies if props reassignment should be also prohibit [true, false]"
      }
    ]
  },
  {
    "patternId": "no-process-env",
    "title": "Prohibit process.env",
    "description": "Prohibits the usage of process.env to avoid global dependencies.",
    "timeToFix": 40
  },
  {
    "patternId": "no-proto",
    "title": "Prohibit use of __proto__",
    "description": "Prohibits the usage __proto__ property (has been deprecated), use getPrototypeOf.",
    "timeToFix": 10
  },
  {
    "patternId": "no-redeclare",
    "title": "Prohibit Redeclaring Variables",
    "description": "Prohibits that you redeclare a variable, using a var with a name that is already defined",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "builtinGlobals",
        "description": "When set to true, lets you apply this pattern to built-in global variables [true, false]"
      }
    ]
  },
  {
    "patternId": "no-return-assign",
    "title": "Prohibit Assignment in return Statement",
    "description": "Prohibits assignments in a return statement (it's usually a comparison typo)",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies when the assignment is disallowed [except-parens, always]"
      }
    ]
  },
  {
    "patternId": "no-script-url",
    "title": "Prohibit Script URLs",
    "description": "Prohibits using return of a script as URL, you have to parse it first",
    "timeToFix": 15
  },
  {
    "patternId": "no-self-compare",
    "title": "Prohibit Self Compare",
    "description": "Prohibits comparing a variable against itself, is usually an error or a typo",
    "timeToFix": 15
  },
  {
    "patternId": "no-sequences",
    "title": "Prohibit Comma Operator",
    "description": "Prohibits the comma operator when includes multiple expressions where only one is expected.",
    "timeToFix": 15
  },
  {
    "patternId": "no-throw-literal",
    "title": "Enforce throw Error Object",
    "description": "Enforces that when you throw an object, it has to be the Error object itself",
    "timeToFix": 10
  },
  {
    "patternId": "no-unused-expressions",
    "title": "Prohibit Unused Expressions",
    "description": "Prohibits that you have expressions that evaluate to a value but are never used.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "allowShortCircuit",
        "description": "When set to true allows short circuit evaluations [true, false]"
      },
      {
        "name": "allowTernary",
        "description": "When set to true allows the use of ternary operators [true, false]"
      }
    ]
  },
  {
    "patternId": "no-useless-call",
    "title": "Prohibit .call() and .apply().",
    "description": "Prohibits function invocation written by Function.prototype.call() and Function.prototype.apply()",
    "timeToFix": 10
  },
  {
    "patternId": "no-useless-concat",
    "title": "Prohibit unnecessary Concatenation",
    "description": "Prohibits to concatenate two strings together when they are on the same line since they could be combined into a single string.",
    "timeToFix": 5
  },
  {
    "patternId": "no-void",
    "title": "Prohibit void operator",
    "description": "Prohibits the use of void operator to obtain undefined",
    "timeToFix": 10
  },
  {
    "patternId": "no-warning-comments",
    "title": "Prohibit Warning Comments",
    "description": "Prohibits the use of code marks that may suggest that something is not done. Examples are: //TODO: OR //FIX ME.",
    "timeToFix": 5
  },
  {
    "patternId": "no-with",
    "title": "No with Statements",
    "description": "Prohibits the use of the with statement",
    "timeToFix": 5
  },
  {
    "patternId": "radix",
    "title": "Require Radix Parameter",
    "description": "Enforces the use of the of radix parameter in the parseInt() function.",
    "timeToFix": 5
  },
  {
    "patternId": "vars-on-top",
    "title": "Require Variable Declarations to be at the top of their scope",
    "description": "Enforces variables Declaration are required to be on the top of their scope or top of the program.",
    "timeToFix": 5
  },
  {
    "patternId": "wrap-iife",
    "title": "Require IIFEs to be Wrapped",
    "description": "Require immediate function invocation to be wrapped in parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "yoda",
    "title": "Require or Prohibit Yoda Conditions",
    "description": "Require or Prohibits variable declaration which literal value of the condition comes first while the variable comes second.",
    "timeToFix": 5
  },
  {
    "patternId": "strict",
    "title": "Strict Mode",
    "description": "Prohibits/Enforces strict mode troughout the code.",
    "timeToFix": 5
  },
  {
    "patternId": "init-declarations",
    "title": "Enforce/Prohibit Variable Initializations",
    "description": "Enforces/Prohibits that values can be assigned during in variable declaration.",
    "timeToFix": 10
  },
  {
    "patternId": "no-catch-shadow",
    "title": "Prohibit Shadowing of Variables Inside of catch",
    "description": "This rule prevents the use of variables in the catch clause parameter with the same name as a variable in the outer scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-delete-var",
    "title": "Prohibit Variables Deletion",
    "description": "This rule prevents the use of delete operator on variables:",
    "timeToFix": 5
  },
  {
    "patternId": "no-label-var",
    "title": "Prohibit Labels That Are Variables Names",
    "description": "Prohibits the use of labels that shares a name with a variable in that is in scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-shadow-restricted-names",
    "title": "Prohibit Shadowing of Restricted Names",
    "description": "Prohibits Defining restricted name(NaN,null..) to mean something else.",
    "timeToFix": 5
  },
  {
    "patternId": "no-shadow",
    "title": "Prohibit Shadowing",
    "description": "Prohibits the use of local variables that share the name with variables in the global scope.",
    "timeToFix": 10
  },
  {
    "patternId": "no-undef-init",
    "title": "Prohibit Initializing to undefined",
    "description": "Prohibit initializing variables to undefined.",
    "timeToFix": 10
  },
  {
    "patternId": "no-undef",
    "title": "Prohibit Undeclared Variables",
    "description": "Prohibits reference to an undeclared variable.",
    "timeToFix": 5
  },
  {
    "patternId": "no-undefined",
    "title": "Prohibit Use of undefined variable",
    "description": "Prohibits using  restricted name undefined in variables.",
    "timeToFix": 5
  },
  {
    "patternId": "no-unused-vars",
    "title": "Prohibit Unused Variables",
    "description": "Prohibit Unused Variables",
    "timeToFix": 10
  },
  {
    "patternId": "no-use-before-define",
    "title": "Prohibit the use of variables before defining.",
    "description": "Prohibit the use of variables before defining them.",
    "timeToFix": 10
  },
  {
    "patternId": "callback-return",
    "title": "Enforce Return After Callback",
    "description": "This rule prevents callback to happen multiple times",
    "timeToFix": 10
  },
  {
    "patternId": "global-require",
    "title": "Prohibit require() outside of the top-level module scope.",
    "description": "Enforces declaring module's dependencies at the beginning of a module.",
    "timeToFix": 5
  },
  {
    "patternId": "handle-callback-err",
    "title": "Enforce Callback Error Handling",
    "description": "Enforces you to handle the errors that come from a callback.",
    "timeToFix": 10
  },
  {
    "patternId": "no-mixed-requires",
    "title": "Prohibit Mixed Requires",
    "description": "Prohibits the mixing required modules and other variable declarations.",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-require",
    "title": "Prohibit new require",
    "description": "The require function is used to include modules that exist in separate files.",
    "timeToFix": 5
  },
  {
    "patternId": "no-path-concat",
    "title": "Prohibit string concatenation when using _dirname and _filename",
    "description": "Prohibits the use of __dirname and __filname in Node.Js for string concatenation.",
    "timeToFix": 10
  },
  {
    "patternId": "no-process-exit",
    "title": "Prohibit process.exit()",
    "description": "Prohibits process.exit() method in Node.js.",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-modules",
    "title": "Prohibit Node modules",
    "description": "Prohibits the use of specificified node modules.",
    "timeToFix": 5
  },
  {
    "patternId": "no-sync",
    "title": "Prohibit Synchronous Methods",
    "description": "Prohibits the use of synchronous methods consider using the asynchronous ones.",
    "timeToFix": 10
  },
  {
    "patternId": "array-bracket-spacing",
    "title": "Prohibit or enforce spaces inside of brackets.",
    "description": "Prohibit/Enforces the use of spaces between array brackets.",
    "timeToFix": 5
  },
  {
    "patternId": "block-spacing",
    "title": "Prohibit or enforce spaces inside of single line blocks.",
    "description": "This rule is for spacing style within single line blocks.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Enforces or prohibits spaces within single block lines[always, never]"
      }
    ]
  },
  {
    "patternId": "brace-style",
    "title": "Require Brace Style",
    "description": "Enforces a style in placement of curly braces relative to their control statement and body.",
    "timeToFix": 15
  },
  {
    "patternId": "camelcase",
    "title": "Require Camelcase",
    "description": "Enforces the use of camelCase on variables.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "properties",
        "description": "The style of variables camelCase [always, never]"
      }
    ]
  },
  {
    "patternId": "comma-spacing",
    "title": "Enforces spacing around commas",
    "description": "Spacing around commas improve readability of a list of items.",
    "timeToFix": 10
  },
  {
    "patternId": "comma-style",
    "title": "Enforces comma style that you prefer",
    "description": "This rule is aimed at enforcing a particular comma style in JavaScript.",
    "timeToFix": 5
  },
  {
    "patternId": "computed-property-spacing",
    "title": "Prohibit or enforce spaces inside of computed properties.",
    "description": "Require or Prohibit spaces between computed properties.",
    "timeToFix": 5
  },
  {
    "patternId": "consistent-this",
    "title": "Require Consistent this",
    "description": "Enforces a consistent name for 'this' variable.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "This rule designates a variable as the chosen alias for this."
      }
    ]
  },
  {
    "patternId": "eol-last",
    "title": "Require file to end with single newline",
    "description": "This rule enforces newlines for all non-empty programs.",
    "timeToFix": 15
  },
  {
    "patternId": "func-names",
    "title": "Require Function Expressions to have a Name",
    "description": "Enforces the namming of functions expressions.",
    "timeToFix": 10
  },
  {
    "patternId": "func-style",
    "title": "Enforce Function Style",
    "description": "With this rule function declarations must have the function keyword first, followed by a name, followed by its arguments and the function body.",
    "timeToFix": 10
  },
  {
    "patternId": "id-length",
    "title": "Limit minimum and maximum length for identifiers",
    "description": "Enforces a minimum and/or maximum variable identifier length. (usually min 2-chars)",
    "timeToFix": 10
  },
  {
    "patternId": "id-match",
    "title": "Require IDs to match a pattern",
    "description": "This rule allows you to precisely define and enforce the variables and function names your team should use.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Regex that specifies the allowed name convention"
      },
      {
        "name": "properties",
        "description": "Specifies whether this pattern will be applied to property names or ignore them [true, false]"
      }
    ]
  },
  {
    "patternId": "indent",
    "title": "Enforce Indentation standard",
    "description": "This option validates a specific tab width for your code in block statements.",
    "timeToFix": 10
  },
  {
    "patternId": "jsx-quotes",
    "title": "Enforce JSX Quote Style",
    "description": "Enforces the same type of quotes throughout the code",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The quoting style you prefer [prefer-single, prefer-double]"
      }
    ]
  },
  {
    "patternId": "key-spacing",
    "title": "Enforce Property Spacing",
    "description": "Enforces spacing around the colon in object literal properties and ensures vertical alignment of values in an object literal",
    "timeToFix": 15
  },
  {
    "patternId": "lines-around-comment",
    "title": "Enforce empty lines around comments",
    "description": "Requires empty space around comments.",
    "timeToFix": 10
  },
  {
    "patternId": "linebreak-style",
    "title": "Prohibit mixing CRLF and LF linebreaks",
    "description": "Enforces the same style of linebreak throughout the code.",
    "timeToFix": 5
  },
  {
    "patternId": "max-nested-callbacks",
    "title": "Set Maximum Depth of Nested Callbacks",
    "description": "Enforces a maximum number of nested callbacks.",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The max depth of nesting"
      }
    ]
  },
  {
    "patternId": "new-cap",
    "title": "Require Constructors to Use Initial Caps",
    "description": "Enforces constructors to begin with uppercase letter.",
    "timeToFix": 10
  },
  {
    "patternId": "new-parens",
    "title": "Require Parens for Constructors",
    "description": "Enforces the use of parentheses when invoking a constructor even if there are no arguments.",
    "timeToFix": 10
  },
  {
    "patternId": "newline-after-var",
    "title": "Require or Prohibit an empty newline after variable declarations.",
    "description": "Enforces/Prohibits an empty line between var statements.",
    "timeToFix": 5
  },
  {
    "patternId": "no-array-constructor",
    "title": "Prohibit creation of dense arrays using the Array constructor",
    "description": "Prohibits the creating of arrays with multiple dimensions.",
    "timeToFix": 10
  },
  {
    "patternId": "no-continue",
    "title": "Prohibit continue.",
    "description": "Prohibits the use of continue in the current or labeled loop.",
    "timeToFix": 10
  },
  {
    "patternId": "no-inline-comments",
    "title": "Prohibits comments after code. Comments must come on their own lines.",
    "description": "Prohibits comments in the same line as codes.",
    "timeToFix": 10
  },
  {
    "patternId": "no-lonely-if",
    "title": "Prohibit if as the Only Statement in an else Block.",
    "description": "Prohibits the use of as the the only statement in the else block it is better to combine the else if block.",
    "timeToFix": 15
  },
  {
    "patternId": "no-mixed-spaces-and-tabs",
    "title": "Prohibit mixed spaces and tabs for indentation",
    "description": "Prohibits mixes of tabs and spaces for idententation.",
    "timeToFix": 5
  },
  {
    "patternId": "no-multiple-empty-lines",
    "title": "Prohibits multiple blank lines",
    "description": "Prohibits multiple blank lines in the code.",
    "timeToFix": 10
  },
  {
    "patternId": "no-nested-ternary",
    "title": "Prohibit Nested Ternaries",
    "description": "Prohibits the use of nested ternary expressions.",
    "timeToFix": 10
  },
  {
    "patternId": "no-negated-condition",
    "title": "Prohibit use of negated expressions in conditions",
    "description": "Negated conditions are more difficult to understand.",
    "timeToFix": 5
  },
  {
    "patternId": "no-new-object",
    "title": "Prohibit the use of the Object constructor",
    "description": "The Object constructor is used to create new generic objects in JavaScript.",
    "timeToFix": 5
  },
  {
    "patternId": "no-restricted-syntax",
    "title": "Prohibit certain syntax",
    "description": "This pattern prohibits the use of expression such as FunctionExpression or WithStatement.",
    "timeToFix": 5
  },
  {
    "patternId": "no-spaced-func",
    "title": "Prohibit Spaces in Function Calls",
    "description": "Prohibits spaces between the name of a functions and the parentheses that execute it.",
    "timeToFix": 5
  },
  {
    "patternId": "no-ternary",
    "title": "Prohibit Ternary Operators",
    "description": "The ternary operator is used to conditionally assign a value to a variable.",
    "timeToFix": 10
  },
  {
    "patternId": "no-trailing-spaces",
    "title": "Prohibit trailing spaces at the end of lines",
    "description": "This rule cleans the extra space in the end of lines.",
    "timeToFix": 10
  },
  {
    "patternId": "no-underscore-dangle",
    "title": "Prohibit Dangling Underscores in Identifiers",
    "description": "Prohibits the use of underscores at the beggining or end of a variable name.",
    "timeToFix": 5
  },
  {
    "patternId": "no-unneeded-ternary",
    "title": "Prohibit conditional expressions that can be expressed with simpler constructs",
    "description": "use ! to convert the test to a Boolean.",
    "timeToFix": 10
  },
  {
    "patternId": "object-curly-spacing",
    "title": "Prohibit or enforce spaces inside of curly braces in objects.",
    "description": "Prohibit spaces between curly braces.",
    "timeToFix": 10
  },
  {
    "patternId": "one-var",
    "title": "Require or Prohibit One Variable Declaration per Scope",
    "description": "This rule Enforces/Prohibits you to use only one var per scope.",
    "timeToFix": 10
  },
  {
    "patternId": "operator-assignment",
    "title": "Operator Assignment Shorthand",
    "description": "Requires to use operator Shorthand. Example:x = x + 4 can be shortened to x += 4. ",
    "timeToFix": 5
  },
  {
    "patternId": "operator-linebreak",
    "title": "Operator Linebreak",
    "description": "This rule enforces linebreaks to happen in the operators.",
    "timeToFix": 10
  },
  {
    "patternId": "padded-blocks",
    "title": "Enforce padding within blocks",
    "description": "Enforces separating the block content and the surrounding code.",
    "timeToFix": 10
  },
  {
    "patternId": "quote-props",
    "title": "Quoting Style for Property Names",
    "description": "This rule enforces you to quote with literals or strings.",
    "timeToFix": 10
  },
  {
    "patternId": "quotes",
    "title": "Quotes Style",
    "description": "Enforce coherent quotes style",
    "timeToFix": 10,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "The quoting style you prefer [single, double]"
      }
    ]
  },
  {
    "patternId": "require-jsdoc",
    "title": "Require JSDoc comment",
    "description": "This rule generates warnings for nodes which do not have JSDoc comments.",
    "timeToFix": 10
  },
  {
    "patternId": "semi-spacing",
    "title": "Enforce spacing before and after semicolons",
    "description": "JavaScript allows you to place unnecessary spaces before or after a semicolon.",
    "timeToFix": 10
  },
  {
    "patternId": "semi",
    "title": "Enforce or Prohibit Semicolons",
    "description": "Enforce or Prohibit Semicolons and the end of each statement.",
    "timeToFix": 10
  },
  {
    "patternId": "sort-vars",
    "title": "Variable Sorting",
    "description": "Enforce the sorting of variables during declaration.",
    "timeToFix": 5
  },
  {
    "patternId": "space-after-keywords",
    "title": "Require or Prohibit spaces following keywords",
    "description": "Require or Prohibit spaces following keywords.",
    "timeToFix": 5
  },
  {
    "patternId": "space-before-keywords",
    "title": "Require or Prohibit spaces before keywords",
    "description": "Require or Prohibit spaces preceding certain keywords.",
    "timeToFix": 10
  },
  {
    "patternId": "space-before-blocks",
    "title": "Require Or Prohibit Space Before Blocks",
    "description": "Require/Prohibit in the spacing before blocks.",
    "timeToFix": 10
  },
  {
    "patternId": "space-before-function-paren",
    "title": "Require or Prohibit a space before function parenthesis",
    "description": "When formatting a function, whitespace is allowed between the function name or function keyword and the opening paren.",
    "timeToFix": 10
  },
  {
    "patternId": "space-in-parens",
    "title": "Prohibit or enforce spaces inside of parentheses",
    "description": "Enforces/Prohibit spaces inside of parentheses.",
    "timeToFix": 5
  },
  {
    "patternId": "space-infix-ops",
    "title": "Require Spaces Around Infix Operators",
    "description": "Enforces spaces around operators.",
    "timeToFix": 10
  },
  {
    "patternId": "space-return-throw-case",
    "title": "Require spaces following return, throw, and case",
    "description": "Enforces spaces following return, throw, and case.",
    "timeToFix": 5
  },
  {
    "patternId": "space-unary-ops",
    "title": "Require or Prohibit spaces before/after unary operators",
    "description": "Enforces/Prohibits spaces before/after unary operators.",
    "timeToFix": 5
  },
  {
    "patternId": "spaced-comment",
    "title": "Requires or Prohibits a whitespace (space or tab) beginning a comment",
    "description": "Enforces/Prohibit a whitespace immediately after the initial // or /* of a comment.",
    "timeToFix": 5,
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "When set to always, you need to have a white space immediately after the initial // or /* [always, never]"
      }
    ]
  },
  {
    "patternId": "wrap-regex",
    "title": "Require Regex Literals to be Wrapped",
    "description": "Enforces parentheses around slash operator.",
    "timeToFix": 10
  },
  {
    "patternId": "arrow-parens",
    "title": "Require parentheses in arrow function arguments",
    "description": "Enforces the consistent use of parentheses in arrow functions.",
    "parameters": [
      {
        "name": "unnamedParam",
        "description": "Specifies when the parentheses are necessary [always, as-needed]"
      }
    ]
  },
  {
    "patternId": "arrow-spacing",
    "title": "Require space before/after arrow function's arrow",
    "description": "Enforces spaces around the arrow function.",
    "timeToFix": 5
  },
  {
    "patternId": "constructor-super",
    "title": "Verify calls of super() in constructors",
    "description": "This rule checks for super in constructors of derived classes.",
    "timeToFix": 5
  },
  {
    "patternId": "generator-star-spacing",
    "title": "Require spacing around the * in generator functions.",
    "description": "Enforces spacing around *.",
    "timeToFix": 5
  },
  {
    "patternId": "no-class-assign",
    "title": "Prohibit modifying variables of class declarations.",
    "description": "Prohibits modifying the value of a class.",
    "timeToFix": 10
  },
  {
    "patternId": "no-const-assign",
    "title": "Prohibit modifying variables that are declared using const",
    "description": "Prohibits changes in variables that are declared using const keyword.",
    "timeToFix": 5
  },
  {
    "patternId": "no-dupe-class-members",
    "title": "Prohibit duplicate name in class members",
    "description": "Prohibits declarations of the same name in class members.",
    "timeToFix": 10
  },
  {
    "patternId": "no-this-before-super",
    "title": "Prohibit use of this/super before calling super() in constructors.",
    "description": "In the constructor of derived classes, if this/super are used before super() calls, it raises a reference error.",
    "timeToFix": 10
  },
  {
    "patternId": "no-var",
    "title": "require let or const instead of var",
    "description": "Enforces the use of let or const instead of var.",
    "timeToFix": 10
  },
  {
    "patternId": "object-shorthand",
    "title": "Require Object Literal Shorthand Syntax",
    "description": "This syntax can make defining complex object literals much cleaner.",
    "timeToFix": 10
  },
  {
    "patternId": "prefer-arrow-callback",
    "title": "Suggest using arrow functions as callbacks.",
    "description": "Arrow functions are suited to callbacks.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-const",
    "title": "Suggest using const",
    "description": "If a variable is never modified, using the const declaration is better.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-spread",
    "title": "Suggest using the spread operator instead of .apply().",
    "description": "Before ES2015, one must use Function.prototype.apply() to call variadic functions.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-reflect",
    "title": "Suggest using Reflect methods where applicable",
    "description": "The ES6 Reflect API comes with a handful of methods which deprecate methods on old constructors.",
    "timeToFix": 5
  },
  {
    "patternId": "prefer-template",
    "title": "Suggest using template literals instead of string concatenation.",
    "description": "In ES2015 (ES6), we can use template literals instead of string concatenation.",
    "timeToFix": 10
  },
  {
    "patternId": "require-yield",
    "title": "Prohibit generator functions that do not have yield",
    "description": "This rule generates warnings for generator functions that do not have the yield keyword.",
    "timeToFix": 10
  }
]
